/**
 * Merge.java
 *
 * This program implements Merge sort.
 *
 * @author Susannah Bennett
 * Wheaton College, CSCI 235, Fall 2019
 * Project 3
 * 10.14.19
 */

public class Merge {
    
    /**
     * Sort an array, in-place, using merging.
     * @param array The array to be sorted.
     * POSTCONDITION: The elements of array are in ascending order.
     */
    public static void sort(int[] array) {
	int[] sorted = mergeSort(array);
 
	for (int i = 0; i < array.length; i++){
	    array[i] = sorted[i];
	}
    }

    /**
     * Extract the portion of an array from start up to (excluding) stop.
     * @param array The source array.
     * @param start The starting index (inclusive).
     * @param stop  The ending index (exclusive).
     * @return An array containing the same elements the portion of array.
     * PRECONDITION: 0 <= start <= stop <= array.length
     */
    private static int[] subarray(int[] array, int start, int stop) {

	int [] half = new int[stop-start];
	for (int i = 0; i < stop-start; i++){
	    half[i] = array[i+start];
	}
	return half;
    }

    /**
     * Merge two sorted arrays into one new array.
     * @param first The first array, already sorted.
     * @param second The second array, already sorted.
     * @return A new array containing the elements of first and second,
     *         in order.
     */
    private static int[] merge(int[] first, int[] second) {
	int size = first.length + second.length;
        int [] merged = new int [size];

	int firstIndex = 0;
	int secondIndex = 0;
	int mergedIndex = 0;

	while (mergedIndex < size){ 
	    while (firstIndex != first.length && secondIndex != second.length) {
	    
		if (first[firstIndex] < second[secondIndex]){
		    merged[mergedIndex] = first[firstIndex];
		    firstIndex++;
		    mergedIndex++;
		} else {
		    merged[mergedIndex] = second[secondIndex];
		    secondIndex++;
		    mergedIndex++;
		}
	    }

	    if (firstIndex == first.length){
		merged[mergedIndex] = second[secondIndex];
		mergedIndex++;
		secondIndex++;
	    } else {
		merged[mergedIndex] = first[firstIndex];
		mergedIndex++;
		firstIndex++;
	    }
	}

      	return merged;

    }

    /**
     * Sort an array by merging.
     * @param array The array to sort.
     * @return A new array containing the elements of array, in order.
     */
    private static int[] mergeSort(int[] array) {
	if (array.length == 1){
	    return array;
	}

	int middle = array.length / 2;
	
	int[] left = subarray(array, 0, middle);
	int[] right = subarray(array, middle, array.length);
		
 	return merge(mergeSort(left), mergeSort(right));

    }


}
